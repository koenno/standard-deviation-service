// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ResponseParser is an autogenerated mock type for the ResponseParser type
type ResponseParser struct {
	mock.Mock
}

type ResponseParser_Expecter struct {
	mock *mock.Mock
}

func (_m *ResponseParser) EXPECT() *ResponseParser_Expecter {
	return &ResponseParser_Expecter{mock: &_m.Mock}
}

// ParseIntegers provides a mock function with given fields: bb, contentType
func (_m *ResponseParser) ParseIntegers(bb []byte, contentType string) ([]int, error) {
	ret := _m.Called(bb, contentType)

	var r0 []int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, string) ([]int, error)); ok {
		return rf(bb, contentType)
	}
	if rf, ok := ret.Get(0).(func([]byte, string) []int); ok {
		r0 = rf(bb, contentType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, string) error); ok {
		r1 = rf(bb, contentType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResponseParser_ParseIntegers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseIntegers'
type ResponseParser_ParseIntegers_Call struct {
	*mock.Call
}

// ParseIntegers is a helper method to define mock.On call
//   - bb []byte
//   - contentType string
func (_e *ResponseParser_Expecter) ParseIntegers(bb interface{}, contentType interface{}) *ResponseParser_ParseIntegers_Call {
	return &ResponseParser_ParseIntegers_Call{Call: _e.mock.On("ParseIntegers", bb, contentType)}
}

func (_c *ResponseParser_ParseIntegers_Call) Run(run func(bb []byte, contentType string)) *ResponseParser_ParseIntegers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(string))
	})
	return _c
}

func (_c *ResponseParser_ParseIntegers_Call) Return(_a0 []int, _a1 error) *ResponseParser_ParseIntegers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResponseParser_ParseIntegers_Call) RunAndReturn(run func([]byte, string) ([]int, error)) *ResponseParser_ParseIntegers_Call {
	_c.Call.Return(run)
	return _c
}

// NewResponseParser creates a new instance of ResponseParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResponseParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResponseParser {
	mock := &ResponseParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
