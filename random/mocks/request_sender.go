// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// RequestSender is an autogenerated mock type for the RequestSender type
type RequestSender struct {
	mock.Mock
}

type RequestSender_Expecter struct {
	mock *mock.Mock
}

func (_m *RequestSender) EXPECT() *RequestSender_Expecter {
	return &RequestSender_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: req
func (_m *RequestSender) Send(req *http.Request) ([]byte, string, error) {
	ret := _m.Called(req)

	var r0 []byte
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(*http.Request) ([]byte, string, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) []byte); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request) string); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(*http.Request) error); ok {
		r2 = rf(req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RequestSender_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type RequestSender_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - req *http.Request
func (_e *RequestSender_Expecter) Send(req interface{}) *RequestSender_Send_Call {
	return &RequestSender_Send_Call{Call: _e.mock.On("Send", req)}
}

func (_c *RequestSender_Send_Call) Run(run func(req *http.Request)) *RequestSender_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *RequestSender_Send_Call) Return(_a0 []byte, _a1 string, _a2 error) *RequestSender_Send_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *RequestSender_Send_Call) RunAndReturn(run func(*http.Request) ([]byte, string, error)) *RequestSender_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewRequestSender creates a new instance of RequestSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRequestSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *RequestSender {
	mock := &RequestSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
