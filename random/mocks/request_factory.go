// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/koenno/standard-deviation-service/client"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// RequestFactory is an autogenerated mock type for the RequestFactory type
type RequestFactory struct {
	mock.Mock
}

type RequestFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *RequestFactory) EXPECT() *RequestFactory_Expecter {
	return &RequestFactory_Expecter{mock: &_m.Mock}
}

// NewRequest provides a mock function with given fields: ctx, opts
func (_m *RequestFactory) NewRequest(ctx context.Context, opts ...client.Option) (*http.Request, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *http.Request
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...client.Option) (*http.Request, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...client.Option) *http.Request); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...client.Option) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestFactory_NewRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewRequest'
type RequestFactory_NewRequest_Call struct {
	*mock.Call
}

// NewRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...client.Option
func (_e *RequestFactory_Expecter) NewRequest(ctx interface{}, opts ...interface{}) *RequestFactory_NewRequest_Call {
	return &RequestFactory_NewRequest_Call{Call: _e.mock.On("NewRequest",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *RequestFactory_NewRequest_Call) Run(run func(ctx context.Context, opts ...client.Option)) *RequestFactory_NewRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]client.Option, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(client.Option)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *RequestFactory_NewRequest_Call) Return(_a0 *http.Request, _a1 error) *RequestFactory_NewRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RequestFactory_NewRequest_Call) RunAndReturn(run func(context.Context, ...client.Option) (*http.Request, error)) *RequestFactory_NewRequest_Call {
	_c.Call.Return(run)
	return _c
}

// NewRequestFactory creates a new instance of RequestFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRequestFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *RequestFactory {
	mock := &RequestFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
