// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	service "github.com/koenno/standard-deviation-service/service"
)

// StdDevCalculator is an autogenerated mock type for the StdDevCalculator type
type StdDevCalculator struct {
	mock.Mock
}

type StdDevCalculator_Expecter struct {
	mock *mock.Mock
}

func (_m *StdDevCalculator) EXPECT() *StdDevCalculator_Expecter {
	return &StdDevCalculator_Expecter{mock: &_m.Mock}
}

// Calculate provides a mock function with given fields: input
func (_m *StdDevCalculator) Calculate(input <-chan []int) <-chan service.StdDevResult {
	ret := _m.Called(input)

	var r0 <-chan service.StdDevResult
	if rf, ok := ret.Get(0).(func(<-chan []int) <-chan service.StdDevResult); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan service.StdDevResult)
		}
	}

	return r0
}

// StdDevCalculator_Calculate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Calculate'
type StdDevCalculator_Calculate_Call struct {
	*mock.Call
}

// Calculate is a helper method to define mock.On call
//   - input <-chan []int
func (_e *StdDevCalculator_Expecter) Calculate(input interface{}) *StdDevCalculator_Calculate_Call {
	return &StdDevCalculator_Calculate_Call{Call: _e.mock.On("Calculate", input)}
}

func (_c *StdDevCalculator_Calculate_Call) Run(run func(input <-chan []int)) *StdDevCalculator_Calculate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(<-chan []int))
	})
	return _c
}

func (_c *StdDevCalculator_Calculate_Call) Return(_a0 <-chan service.StdDevResult) *StdDevCalculator_Calculate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StdDevCalculator_Calculate_Call) RunAndReturn(run func(<-chan []int) <-chan service.StdDevResult) *StdDevCalculator_Calculate_Call {
	_c.Call.Return(run)
	return _c
}

// NewStdDevCalculator creates a new instance of StdDevCalculator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStdDevCalculator(t interface {
	mock.TestingT
	Cleanup(func())
}) *StdDevCalculator {
	mock := &StdDevCalculator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
