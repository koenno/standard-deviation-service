// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// RandomIntegerGenerator is an autogenerated mock type for the RandomIntegerGenerator type
type RandomIntegerGenerator struct {
	mock.Mock
}

type RandomIntegerGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *RandomIntegerGenerator) EXPECT() *RandomIntegerGenerator_Expecter {
	return &RandomIntegerGenerator_Expecter{mock: &_m.Mock}
}

// Integers provides a mock function with given fields: ctx, quantity
func (_m *RandomIntegerGenerator) Integers(ctx context.Context, quantity int) ([]int, error) {
	ret := _m.Called(ctx, quantity)

	var r0 []int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]int, error)); ok {
		return rf(ctx, quantity)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []int); ok {
		r0 = rf(ctx, quantity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, quantity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RandomIntegerGenerator_Integers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Integers'
type RandomIntegerGenerator_Integers_Call struct {
	*mock.Call
}

// Integers is a helper method to define mock.On call
//   - ctx context.Context
//   - quantity int
func (_e *RandomIntegerGenerator_Expecter) Integers(ctx interface{}, quantity interface{}) *RandomIntegerGenerator_Integers_Call {
	return &RandomIntegerGenerator_Integers_Call{Call: _e.mock.On("Integers", ctx, quantity)}
}

func (_c *RandomIntegerGenerator_Integers_Call) Run(run func(ctx context.Context, quantity int)) *RandomIntegerGenerator_Integers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *RandomIntegerGenerator_Integers_Call) Return(_a0 []int, _a1 error) *RandomIntegerGenerator_Integers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RandomIntegerGenerator_Integers_Call) RunAndReturn(run func(context.Context, int) ([]int, error)) *RandomIntegerGenerator_Integers_Call {
	_c.Call.Return(run)
	return _c
}

// NewRandomIntegerGenerator creates a new instance of RandomIntegerGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRandomIntegerGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *RandomIntegerGenerator {
	mock := &RandomIntegerGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
